{"version":3,"sources":["page/BusinessList.js","page/Home.js","App.js","serviceWorker.js","index.js"],"names":["fatchList","a","protocol","window","location","axios","get","data","error","styles","container","width","maxWidth","margin","row","display","justifyContent","alignItems","flexWrap","card","textCenter","BusinessList","state","list","loading","hasOwnProperty","this","setState","style","map","index","name","create_by","className","key","email","Component","Home","to","App","path","component","exact","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"+TAIMA,EAAS,uCAAG,gCAAAC,EAAA,6DACVC,EAAW,QAEM,WADXC,OAAOC,SACTF,WACJA,EAAW,UAJD,kBAOSG,IAAMC,IAAN,UAAaJ,EAAb,uCAPT,uBAOLK,EAPK,EAOLA,KAPK,kBAQHA,GARG,2DAWH,CAACC,MAAK,OAXH,0DAAH,qDAeTC,EAAS,CACXC,UAAW,CACRC,MAAO,OACPC,SAAU,SACVC,OAAQ,UAEXC,IAAK,CACFC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,SAAU,QAEbC,KAAM,CACFR,MAAO,OACPC,SAAU,OAEdQ,WAAY,CACR,UAAa,WAsCNC,E,4MAjCXC,MAAQ,CACJC,KAAM,GACNC,SAAS,G,kMAGQxB,I,QAAbO,E,QACKkB,eAAe,UACpBC,KAAKC,SAAS,CAACJ,KAAMhB,EAAMiB,SAAS,I,qIAIlC,IAAD,EACqBE,KAAKJ,MAAvBC,EADH,EACGA,KAAMC,EADT,EACSA,QACd,OACI,6BACI,wBAAII,MAAOnB,EAAOW,YAAlB,+BACA,yBAAKQ,MAAOnB,EAAOC,WACf,yBAAKkB,MAAOnB,EAAOK,KACdU,EAAU,wCACPD,EAAKM,KAAI,WAAoBC,GAAW,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,UACb,OAAO,yBAAKC,UAAU,OAAOL,MAAOnB,EAAOU,KAAMe,IAAKJ,GAClD,4BAAKA,EAAL,KAAcC,GACd,0CAAiBC,EAAUG,oB,GAvBpCC,aCrCrB3B,EAAS,CACXW,WAAY,CACR,UAAa,WAcNiB,E,uKARP,OACI,6BACI,wBAAIT,MAAOnB,EAAOW,YAAlB,oCAA+D,kBAAC,IAAD,CAAMkB,GAAG,QAAT,wB,GAJ5DF,aCAb3B,G,MAAS,CACZC,UAAW,CACRC,MAAO,OACPC,SAAU,SACVC,OAAQ,UAEXC,IAAK,CACFC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,YA0BHsB,MArBf,WACG,OACG,kBAAC,IAAD,KACG,yBAAKN,UAAU,OACZ,4BAAQA,UAAU,cACf,yBAAKA,UAAU,YAAYL,MAAOnB,EAAOC,WACtC,yBAAKuB,UAAU,8BAA8BL,MAAOnB,EAAOK,KACxD,kBAAC,IAAD,CAAMwB,GAAG,KAAI,yCACb,kBAAC,IAAD,CAAMA,GAAG,SAAT,oBAIT,kBAAC,IAAD,KACG,kBAAC,IAAD,CAAOE,KAAK,QAAQC,UAAWpB,IAC/B,kBAAC,IAAD,CAAOmB,KAAK,IAAIE,OAAK,EAACD,UAAWJ,QCzB5BM,QACW,cAA7BxC,OAAOC,SAASwC,UAEe,UAA7BzC,OAAOC,SAASwC,UAEhBzC,OAAOC,SAASwC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjD,GACLkD,QAAQlD,MAAMA,EAAMmD,c","file":"static/js/main.86103f39.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\n\nconst fatchList = async () => {\n    let protocol = 'http:';\n    let loc = window.location;\n    if (loc.protocol === 'https:'){\n        protocol = 'https:'\n    }\n    try{\n        let {data} = await axios.get(`${protocol}//127.0.0.1:8000/api/business-list`);\n        return data\n    } catch(error) {\n        //  console.log(error)\n        return {error}\n    }\n}\n\nconst styles = {\n    container: {\n       width: '100%',\n       maxWidth: '1170px',\n       margin: '0 auto'\n    },\n    row: { \n       display: 'flex',\n       justifyContent: 'space-between',\n       alignItems: 'center',\n       flexWrap: 'wrap'\n    },\n    card: {\n        width: '100%',\n        maxWidth: '50%'\n    },\n    textCenter: {\n        'textAlign': 'center'\n    }\n }\n\nclass BusinessList extends Component {\n    state = {\n        list: {},\n        loading: true\n    }\n    async componentDidMount(){\n        let data = await fatchList();\n        if(!data.hasOwnProperty('error')){\n            this.setState({list: data, loading: false})\n        }\n    }\n\n    render() {\n        const { list, loading } = this.state;\n        return (\n            <div>                \n                <h2 style={styles.textCenter}>Business List With API Call</h2>\n                <div style={styles.container}>\n                    <div style={styles.row}>\n                        {loading ? <div>Loading</div>: (\n                            list.map(({name, create_by}, index) => {\n                                return <div className=\"card\" style={styles.card} key={index}>\n                                    <h3>{index}: {name}</h3>\n                                    <h5>Create By: { create_by.email}</h5>\n                                </div>\n                            })\n                        )}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default BusinessList;\n","import React, { Component } from 'react';\nimport {Link} from 'react-router-dom';\n\nconst styles = {\n    textCenter: {\n        'textAlign': 'center'\n    }\n}\n\nclass Home extends Component {\n    render() {\n        return (\n            <div>\n                <h2 style={styles.textCenter}>Hello Creative Developer, Browse <Link to='list'>Business Lists</Link></h2>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\n\nimport BusinessList from './page/BusinessList';\nimport Home from './page/Home'\n\nimport './App.css';\n\n\nconst styles = {\n   container: {\n      width: '100%',\n      maxWidth: '1170px',\n      margin: '0 auto'\n   },\n   row: { \n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center'\n   }\n}\n\n\nfunction App() {\n   return (\n      <Router>\n         <div className=\"App\">\n            <header className=\"App-header\">\n               <div className=\"container\" style={styles.container}>\n                  <div className=\"row justify-content-between\" style={styles.row}>\n                     <Link to=\"/\"><h2>Blisting</h2></Link>\n                     <Link to='/list'>Business List</Link>\n                  </div>\n               </div>\n            </header>\n            <Switch>\n               <Route path='/list' component={BusinessList} />\n               <Route path=\"/\" exact component={Home} />\n            </Switch>\n         </div>\n      </Router>\n   );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}